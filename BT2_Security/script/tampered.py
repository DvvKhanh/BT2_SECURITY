from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.units import mm
from pikepdf import Pdf
from pathlib import Path
from datetime import datetime

INPUT_PDF = Path(r"D:\BT2_Security\pdf\signed.pdf")
OUTPUT_DIR = Path(r"D:\BT2_Security\output")
OUTPUT_DIR.mkdir(parents=True, exist_ok=True)

OVERLAY_PDF = OUTPUT_DIR / "watermark_overlay.pdf"
FIRSTPAGE_OVERLAY = OUTPUT_DIR / "firstpage_alert.pdf"
LAST_OVERLAY = OUTPUT_DIR / "lastpage_overlay.pdf"
OUTPUT_PDF = OUTPUT_DIR / f"tampered.pdf"


FONT_PATH = Path("C:/Windows/Fonts/times.ttf")
pdfmetrics.registerFont(TTFont("TimesUnicode", str(FONT_PATH)))


def create_overlay_watermark(path: Path, page_w: float, page_h: float):
    """T·∫°o watermark nghi√™ng m·ªù n·ªÅn."""
    c = canvas.Canvas(str(path), pagesize=(page_w, page_h))
    c.saveState()
    try:
        c.setFillAlpha(0.12)
    except Exception:
        pass
    c.setFont("TimesUnicode", 72)
    c.setFillColorRGB(0.2, 0.2, 0.25)
    c.translate(page_w / 2.0, page_h / 2.0)
    c.rotate(30)
    c.drawCentredString(0, 0, "WATERMARK - FILE ƒê√É B·ªä CH·ªàNH S·ª¨A")
    c.restoreState()

    c.setFont("TimesUnicode", 10)
    c.setFillColorRGB(0, 0, 0)
    margin = 15 * mm
    footer_w = 260
    footer_x = page_w - margin - footer_w
    footer_y = margin
    c.rect(footer_x - 6, footer_y - 6, footer_w + 12, 40, stroke=1, fill=0)
    c.drawString(footer_x, footer_y + 18, "[!] C·∫¢NH B√ÅO: ƒê√¢y KH√îNG PH·∫¢I l√† b·∫£n PDF g·ªëc ƒë√£ k√Ω.")
    c.save()
    print(f"‚úÖ ƒê√£ t·∫°o watermark overlay: {path.name}")


def create_overlay_firstpage_alert(path: Path, page_w: float, page_h: float):
    """Th√™m d√≤ng c·∫£nh b√°o l·ªõn ·ªü ƒë·∫ßu trang (kh√¥ng ƒë√® n·ªôi dung)."""
    c = canvas.Canvas(str(path), pagesize=(page_w, page_h))
    c.setFont("TimesUnicode", 24)
    c.setFillColorRGB(1, 0, 0)

    y_top = page_h - 50  
    c.drawCentredString(page_w / 2, y_top, "File PDF ƒë√£ b·ªã ch·ªânh s·ª≠a ")
    c.setFont("TimesUnicode", 13)
    c.drawCentredString(page_w / 2, y_top - 20, "Ch·ªØ k√Ω s·ªë kh√¥ng c√≤n h·ª£p l·ªá.")
    c.save()
    print(f"üö® ƒê√£ t·∫°o c·∫£nh b√°o trang ƒë·∫ßu: {path.name}")

def create_overlay_footer_time(path: Path, page_w: float, page_h: float):
    """Hi·ªÉn th·ªã th·ªùi gian ch·ªânh s·ª≠a ·ªü d∆∞·ªõi khung c·∫£nh b√°o."""
    c = canvas.Canvas(str(path), pagesize=(page_w, page_h))
    c.setFont("TimesUnicode", 10)
    c.setFillColorRGB(0, 0, 0)
    ts = datetime.now().strftime("%d/%m/%Y %H:%M:%S")

    c.drawRightString(page_w - 15 * mm, 8 * mm, f"ƒê√£ ch·ªânh s·ª≠a ng√†y: {ts}")
    c.save()
    print(f"üïí ƒê√£ t·∫°o footer th·ªùi gian: {path.name}")


def main():
    if not INPUT_PDF.exists():
        raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y file ngu·ªìn: {INPUT_PDF}")

    base = Pdf.open(INPUT_PDF)
    mb = base.pages[0].MediaBox
    page_w = float(mb[2]) - float(mb[0])
    page_h = float(mb[3]) - float(mb[1])


    create_overlay_watermark(OVERLAY_PDF, page_w, page_h)
    create_overlay_firstpage_alert(FIRSTPAGE_OVERLAY, page_w, page_h)
    create_overlay_footer_time(LAST_OVERLAY, page_w, page_h)


    wm_pdf = Pdf.open(OVERLAY_PDF)
    alert_pdf = Pdf.open(FIRSTPAGE_OVERLAY)
    footer_pdf = Pdf.open(LAST_OVERLAY)


    for page in base.pages:
        page.add_overlay(wm_pdf.pages[0])

    base.pages[0].add_overlay(alert_pdf.pages[0])      # c·∫£nh b√°o ƒë·∫ßu trang
    base.pages[-1].add_overlay(footer_pdf.pages[0])    # ng√†y gi·ªù cu·ªëi trang

    base.save(OUTPUT_PDF)
    print(f"üíæ ƒê√£ l∆∞u file m·ªõi: {OUTPUT_PDF}")

if __name__ == "__main__":
    main()
